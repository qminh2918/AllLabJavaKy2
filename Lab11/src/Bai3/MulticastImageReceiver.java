/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Bai3;

import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.net.UnknownHostException;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;

/**
 *
 * @author kuxut
 */
public class MulticastImageReceiver extends javax.swing.JFrame {
private JLabel picture;
    /**
     * Creates new form MulticastImageReceiver
     */
    public MulticastImageReceiver() {
        super("Multicast Image Receiver"); // Set the window title
 setSize(300, 300); // Set the window size
 picture = new JLabel("No image", SwingConstants.CENTER);
 JScrollPane scrollPane = new JScrollPane(picture);
 getContentPane().add(scrollPane, "Center");
 addWindowListener(new WindowAdapter() {
 public void windowClosing(WindowEvent evt) {
 System.exit(0);
 }
 });
    }
    public JLabel getPicture() {
 return picture;
 }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws UnknownHostException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        //if (args.length != 2) // Test for correct # of args
        //throw new IllegalArgumentException("Parameter(s): <225.4.5.6> <8060>");
        final InetAddress multicastAddress = InetAddress.getByName("239.255.255.250");
        if (!multicastAddress.isMulticastAddress())
 throw new IllegalArgumentException("Not a multicast address");
 int port = Integer.parseInt("1234"); 
MulticastImageReceiver multicastImageReceiver = new 
MulticastImageReceiver();
 multicastImageReceiver.setVisible(true);
        new Thread(new MulticastImageReceiverThread(multicastImageReceiver, multicastAddress, port,"No Image")).start();
    }}
        class MulticastImageReceiverThread implements Runnable {
 private static final int MAXFILELEN = 65000; //
 private InetAddress multicastAddress; // Sender multicast address
 private int port; // Sender port
 Runnable updateImage; 
String imageText; // Label text
 byte[] image = new byte[MAXFILELEN]; // Bytes of image
 boolean imageValid = false;
  public MulticastImageReceiverThread(final MulticastImageReceiver frame, InetAddress multicastAddress, int port, String initialImageText) {
      this.multicastAddress = multicastAddress;
 this.port = port;
 this.imageText = initialImageText;
 updateImage = new Runnable() {
 public void run() {
 JLabel picture = frame.getPicture();
 picture.setText(imageText);
 if (imageValid) {
 ImageIcon newImage = new ImageIcon(image);
 picture.setIcon(newImage);
 picture.setPreferredSize(new Dimension(newImage.getIconWidth(),
 newImage.getIconHeight()));
 } else
 picture.setIcon(null);
 picture.revalidate();
 }
 };
  }
public void changeImage() {
try {
 SwingUtilities.invokeAndWait(updateImage);
 } catch (Exception e) {
     System.out.println(e.getMessage());
 }
 }
public void run() {
    DatagramPacket recvPacket = new DatagramPacket(image, MAXFILELEN);
    MulticastSocket socket;
    try {
        socket = new MulticastSocket(port);
        socket.joinGroup(multicastAddress); // Join the multicast group
    } catch (IOException e) {
        imageText = "Problem with multicast socket";
        imageValid = false;
        changeImage();
        return;
    }
    for (;;) {
        try {
            socket.receive(recvPacket); // Receive the image
        }catch (IOException e) {
            break;
        }
        imageText = "";
        imageValid = true;
        changeImage();
        recvPacket.setLength(MAXFILELEN); // You have to reset this!!!
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
